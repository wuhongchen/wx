<?php
/**
 * 公众号核心类
 *
 * [WeEngine System] Copyright (c) 2013 WE7.CC
 */
defined('IN_IA') or exit('Access Denied');

abstract class WeAccount {

	/**
	 * 创建公众号操作对象
	 * @param int $uniAccountId
	 * @return WeAccount|NULL
	 */
	public static function create($acid) {
		$sql = 'SELECT * FROM ' . tablename('account') . ' WHERE `acid`=:acid';
		$account = pdo_fetch($sql, array(':acid' => $acid));
		if(!empty($account)) {
			if($account['type'] == '1') {
				if(!class_exists('WeiXinAccount')) {
					require IA_ROOT . '/framework/class/weixin.account.class.php';
				}
				return new WeiXinAccount($account);
			}
			if($account['type'] == '2') {
				if(!class_exists('YiXinAccount')) {
					require IA_ROOT . '/framework/class/yixin.account.class.php';
				}
				return new YiXinAccount($account);
			}
		}
		return null;
	}
	
	/**
	 * 创建当前公众号操作对象
	 * @param array $uniAccount 统一公号基础对象 
	 */
	abstract public function __construct($uniAccount);

	/**
	 * @retun bool
	 */
	public function checkSign() {
		trigger_error('not supported.', E_USER_WARNING);
	}

	public function fetchAccountInfo() {
		trigger_error('not supported.', E_USER_WARNING);
	}

	/**
	 * 查询当前公号支持的统一消息类型, 当前支持的类型包括: text, image, voice, video, location, link, [subscribe, unsubscribe, qr, trace, click, view, enter]
	 * 分别代表: 文本消息, 图片消息, 音频消息, 视频消息, 位置消息, 链接消息, (其他操作)[开始关注, 取消关注, 扫描二维码, 追踪位置, 点击菜单(模拟关键字), 点击菜单(链接), 进入聊天窗口]
	 * @return array 当前公号支持的消息类型集合
	 */
	public function queryAvailableMessages() {
		return array();
	}
	
	/**
	 * 查询当前公号支持的统一响应结构
	 * @return array 当前公号支持的响应结构集合, 当前支持的类型包括: text, image, voice, video, music, news, link, card
	 */
	public function queryAvailablePackets() {
		return array();
	}
	
	/**
	 * 分析消息内容, 参数为平台消息结构, 并返回统一消息结构
	 * @param array $message 统一消息结构, 见文档 todo
	 * @return array 统一消息结构
	 */
	public function parse($message) {
		$packet = array();
		if (!empty($message)){
			$obj = simplexml_load_string($message, 'SimpleXMLElement', LIBXML_NOCDATA);
			if($obj instanceof SimpleXMLElement) {
				$packet['from'] = strval($obj->FromUserName);
				$packet['to'] = strval($obj->ToUserName);
				$packet['time'] = strval($obj->CreateTime);
				$packet['type'] = strval($obj->MsgType);
				$packet['event'] = strval($obj->Event);
				
				foreach ($obj as $variable => $property) {
					$packet[strtolower($variable)] = (string)$property;
				}
				
				if($packet['type'] == 'text') {
					$packet['content'] = strval($obj->Content);
					$packet['redirection'] = false;
					$packet['source'] = null;
				}
				if($packet['type'] == 'image') {
					$packet['url'] = strval($obj->PicUrl);
				}
				if($packet['type'] == 'voice') {
					$packet['media'] = strval($obj->MediaId);
					$packet['format'] = strval($obj->Format);
				}
				if($packet['type'] == 'video') {
					$packet['media'] = strval($obj->MediaId);
					$packet['thumb'] = strval($obj->ThumbMediaId);
				}
				if($packet['type'] == 'location') {
					$packet['location_x'] = strval($obj->Location_X);
					$packet['location_y'] = strval($obj->Location_Y);
					$packet['scale'] = strval($obj->Scale);
					$packet['label'] = strval($obj->Label);
				}
				if($packet['type'] == 'link') {
					$packet['title'] = strval($obj->Title);
					$packet['description'] = strval($obj->Description);
					$packet['url'] = strval($obj->Url);
				}
				
				//处理其他事件类型
				if($packet['type'] == 'event') {
					$packet['type'] = $packet['event'];
				}
				if($packet['type'] == 'subscribe') {
					//开始关注
					$scene = strval($obj->EventKey);
					if(!empty($scene)) {
						$packet['scene'] = str_replace('qrscene_', '', $scene);
						$packet['ticket'] = strval($obj->Ticket);
					}
				}
				if($packet['type'] == 'unsubscribe') {
					//取消关注
				}
				if($packet['type'] == 'SCAN') {
					//扫描二维码
					$packet['type'] = 'qr';
					$packet['scene'] = strval($obj->EventKey);
					$packet['ticket'] = strval($obj->Ticket);
				}
				if($packet['type'] == 'LOCATION') {
					//追踪地理位置
					$packet['type'] = 'trace';
					$packet['location_x'] = strval($obj->Latitude);
					$packet['location_y'] = strval($obj->Longitude);
					$packet['precision'] = strval($obj->Precision);
				}
				if($packet['type'] == 'CLICK') {
					$packet['type'] = 'click';
					$packet['content'] = strval($obj->EventKey);
				}
				if($packet['type'] == 'VIEW') {
					$packet['type'] = 'view';
					$packet['url'] = strval($obj->EventKey);
				}
				if($packet['type'] == 'ENTER') {
					//进入聊天窗口
					$packet['type'] = 'enter';
				}
			}
		}
		return $packet;
	}
	
	/**
	 * 响应消息内容, 参数为统一响应结构
	 * @param array $packet 统一响应结构, 见文档 todo
	 * @return bool 是否返回成功
	 */
	public function response($packet) {
		if (!is_array($packet)) {
			return $packet;
		}
		if(empty($packet['CreateTime'])) {
			$packet['CreateTime'] = TIMESTAMP;
		}
		if(empty($packet['MsgType'])) {
			$packet['MsgType'] = 'text';
		}
		if(empty($packet['FuncFlag'])) {
			$packet['FuncFlag'] = 0;
		} else {
			$packet['FuncFlag'] = 1;
		}
		return array2xml($packet);
	}

	/**
	 * 查询当前公号是否支持消息推送
	 * @return bool 是否支持
	 */
	public function isPushSupported() {
		return false;
	}
	
	/*
	 * 向指定的用户推送消息
	 * @param string $uniid 指定用户(统一用户) todo
	 * @param array $packet 统一响应结构
	 * @return bool 是否成功
	 */
	public function push($uniid, $packet) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询当前公号是否支持群发消息
	 * @return boolean 是否支持
	 */
	public function isBroadcastSupported() {
		return false;
	}
	
	/**
	 * 向一组用户发送群发消息, 可选的可以指定是否要指定特定组
	 * @param array $packet 统一消息结构
	 * @param array $targets 单独向一组用户群发, 或指定fans列表发送
	 */
	public function broadcast($packet, $targets = array()) {
		trigger_error('not supported.', E_USER_WARNING);
	}

	/**
	 * 查询当前公号是否支持菜单操作
	 * @return bool 是否支持
	 */
	public function isMenuSupported() {
		return false;
	}
	
	/**
	 * 创建菜单
	 * @param array $menu 统一菜单结构 todo
	 * @return bool 是否创建成功
	 */
	public function menuCreate($menu) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 删除菜单
	 * @return bool 是否删除成功
	 */
	public function menuDelete() {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 修改菜单
	 * @param array $menu 统一菜单结构
	 * @return bool 是否修改成功
	 */
	public function menuModify($menu) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询菜单
	 * @return array 统一菜单结构
	 */
	public function menuQuery() {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询当前公号粉丝管理的支持程度
	 * @return array 返回结果为支持的方法列表(fansGroupAll, fansGroupCreate, ...)
	 */
	public function queryFansActions() {
		return array();
	}
	
	/**
	 * 查询当前公号记录的分组信息
	 * @return array 统一分组结构集合
	 */
	public function fansGroupAll() {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 在当前公号记录中创建一条分组信息
	 * @param array $group 统一分组结构 todo
	 * @return bool 是否执行成功
	 */
	public function fansGroupCreate($group) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 在当前公号记录中修改一条分组信息
	 * @param array $group 统一分组结构
	 * @return bool 是否执行成功
	 */
	public function fansGroupModify($group) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 将指定用户移至另一分组中
	 * @param string $uniid 指定用户(统一用户)
	 * @param array $group 统一分组结构
	 * @return bool 是否执行成功
	 */
	public function fansMoveGroup($uniid, $group) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询指定的用户所在的分组
	 * @param string $uniid 指定用户(统一用户)
	 * @return array $group 统一分组结构
	 */
	public function fansQueryGroup($uniid) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询指定的用户的基本信息
	 * @param string $uniid 指定用户(统一用户)
	 * @param boolean $isPlatform 指定的参数是否为平台编号
	 * @return array 统一粉丝信息结构 todo
	 */
	public function fansQueryInfo($uniid, $isOpen) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询当前公号的所有粉丝
	 * @return array 统一粉丝信息结构集合
	 */
	public function fansAll() {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询当前公号地理位置追踪的支持情况
	 * @return array 返回结果为支持的方法列表(traceCurrent, traceHistory)
	 */
	public function queryTraceActions() {
		return array();
	}
	
	/**
	 * 追踪指定的用户的当前位置
	 * @param string $uniid 指定用户(统一用户)
	 * @return array 地理位置信息
	 */
	public function traceCurrent($uniid) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 追踪指定的用户的地理位置
	 * @param string $uniid 指定用户(统一用户)
	 * @param int $time 追踪的时间范围
	 * @return array 地理位置信息追踪集合
	 */
	public function traceHistory($uniid, $time) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 查询当前公号二维码支持情况
	 * @return array 返回结果为支持的方法列表(barCodeCreateDisposable, barCodeCreateFixed)
	 */
	public function queryBarCodeActions() {
		return array();
	}
	
	/**
	 * 生成临时的二维码
	 * 
	 */
	public function barCodeCreateDisposable($barcode) {
		trigger_error('not supported.', E_USER_WARNING);
	}
	
	/**
	 * 生成永久的二维码
	 */
	public function barCodeCreateFixed($barcode) {
		trigger_error('not supported.', E_USER_WARNING);
	}
}

class WeUtility {
	public static function createModule($name) {
		global $_W;
		static $file;
		$classname = ucfirst($name) . 'Module';
		if(!class_exists($classname)) {
			$file = IA_ROOT . "/addons/{$name}/module.php";
			if(!is_file($file)) {
				$file = IA_ROOT . "/framework/builtin/{$name}/module.php";
			}
			if(!is_file($file)) {
				trigger_error('Module Definition File Not Found', E_USER_WARNING);
				return null;
			}
			require $file;
		}
		if(!class_exists($classname)) {
			trigger_error('Module Definition Class Not Found', E_USER_WARNING);
			return null;
		}
		$o = new $classname();
		$o->uniacid = $o->weid = $_W['uniacid'];
		$o->modulename = $name;
		load()->model('module');
		$o->module = module_fetch($name);
		$o->__define = $file;
		if($o instanceof WeModule) {
			return $o;
		} else {
			trigger_error('Module Class Definition Error', E_USER_WARNING);
			return null;
		}
	}

	public static function createModuleProcessor($name) {
		global $_W;
		static $file;
		$classname = "{$name}ModuleProcessor";
		if(!class_exists($classname)) {
			$file = IA_ROOT . "/addons/{$name}/processor.php";
			if(!is_file($file)) {
				$file = IA_ROOT . "/framework/builtin/{$name}/processor.php";
			}
			if(!is_file($file)) {
				trigger_error('ModuleProcessor Definition File Not Found '.$file, E_USER_WARNING);
				return null;
			}
			require $file;
		}
		if(!class_exists($classname)) {
			trigger_error('ModuleProcessor Definition Class Not Found', E_USER_WARNING);
			return null;
		}
		$o = new $classname();
		$o->uniacid = $o->weid = $_W['uniacid'];
		$o->modulename = $name;
		load()->model('module');
		$o->module = module_fetch($name);
		$o->__define = $file;
		if($o instanceof WeModuleProcessor) {
			return $o;
		} else {
			trigger_error('ModuleProcessor Class Definition Error', E_USER_WARNING);
			return null;
		}
	}

	/**
	 * @param $name
	 * @return null | WeModuleReceiver
	 */
	public static function createModuleReceiver($name) {
		global $_W;
		static $file;
		$classname = "{$name}ModuleReceiver";
		if(!class_exists($classname)) {
			$file = IA_ROOT . "/addons/{$name}/receiver.php";
			if(!is_file($file)) {
				$file = IA_ROOT . "/framework/builtin/{$name}/receiver.php";
			}
			if(!is_file($file)) {
				trigger_error('ModuleReceiver Definition File Not Found '.$file, E_USER_WARNING);
				return null;
			}
			require $file;
		}
		if(!class_exists($classname)) {
			trigger_error('ModuleReceiver Definition Class Not Found', E_USER_WARNING);
			return null;
		}
		$o = new $classname();
		$o->uniacid = $o->weid = $_W['uniacid'];
		$o->modulename = $name;
		load()->model('module');
		$o->module = module_fetch($name);
		$o->__define = $file;
		if($o instanceof WeModuleReceiver) {
			return $o;
		} else {
			trigger_error('ModuleReceiver Class Definition Error', E_USER_WARNING);
			return null;
		}
	}

	public static function createModuleSite($name) {
		global $_W;
		static $file;
		$classname = "{$name}ModuleSite";
		if(!class_exists($classname)) {
			$file = IA_ROOT . "/addons/{$name}/site.php";
			if(!is_file($file)) {
				$file = IA_ROOT . "/framework/builtin/{$name}/site.php";
			}
			if(!is_file($file)) {
				trigger_error('ModuleSite Definition File Not Found '.$file, E_USER_WARNING);
				return null;
			}
			require $file;
		}
		if(!class_exists($classname)) {
			trigger_error('ModuleSite Definition Class Not Found', E_USER_WARNING);
			return null;
		}
		$o = new $classname();
		$o->uniacid = $o->weid = $_W['uniacid'];
		$o->modulename = $name;
		load()->model('module');
		$o->module = module_fetch($name);
		$o->__define = $file;
		$o->inMobile = defined('IN_MOBILE');
		if($o instanceof WeModuleSite) {
			return $o;
		} else {
			trigger_error('ModuleReceiver Class Definition Error', E_USER_WARNING);
			return null;
		}
	}

	public static function logging($level = 'info', $message = '') {
		if(!DEVELOPMENT) {
			//return true;
		}
		$filename = IA_ROOT . '/data/logs/' . date('Ymd') . '.log';
		load()->func('file');
		mkdirs(dirname($filename));
		$content = date('Y-m-d H:i:s') . " {$level} :\n------------\n";
		if(is_string($message)) {
			$content .= "String:\n{$message}\n";
		}
		if(is_array($message)) {
			$content .= "Array:\n";
			foreach($message as $key => $value) {
				$content .= sprintf("%s : %s ;\n", $key, $value);
			}
		}
		if($message == 'get') {
			$content .= "GET:\n";
			foreach($_GET as $key => $value) {
				$content .= sprintf("%s : %s ;\n", $key, $value);
			}
		}
		if($message == 'post') {
			$content .= "POST:\n";
			foreach($_POST as $key => $value) {
				$content .= sprintf("%s : %s ;\n", $key, $value);
			}
		}
		$content .= "\n";

		$fp = fopen($filename, 'a+');
		fwrite($fp, $content);
		fclose($fp);
	}
}

abstract class WeBase {
	/**
	 * @var string 当前模块名称 {identifie}
	 */
	public $modulename;
	/**
	 * @var array 当前模块参数及配置结构
	 */
	public $module;
	/**
	 * @var int 当前公众号编号
	 */
	public $weid;
	public $uniacid;
	public $__define;

	/**
	 * 保存当前模块的配置参数
	 * @param $settings array 配置参数
	 * @return bool 是否成功保存
	 */
	public function saveSettings($settings) {
		global $_W;
		$pars = array('module' => $this->modulename, 'uniacid' => $_W['uniacid']);
		$row = array();
		$row['settings'] = iserializer($settings);
		return pdo_update('uni_account_modules', $row, $pars) !== false;
	}

	/**
	 * 构造手机页面URL
	 * @param $do string 要进入的操作名称对应当前模块的 doMobileXXX 中的 XXX
	 * @param array $query 附加的查询参数
	 * @return string 返回的 URL
	 */
	protected function createMobileUrl($do, $query = array()) {
		$query['do'] = $do;
		$query['m'] = strtolower($this->modulename);
		return murl('entry', $query);
	}

	/**
	 * 构造Web页面URL
	 * @param $do string 要进入的操作名称对应当前模块的 doWebXXX 中的 XXX
	 * @param array $query 附加的查询参数
	 * @return string 返回的 URL
	 */
	protected function createWebUrl($do, $query = array()) {
		$query['do'] = $do;
		$query['m'] = strtolower($this->modulename);
		return wurl('site/entry', $query);
	}

	/**
	 * 依次在以下位置查找模板定义文件
	 * App:
	 * 微站风格中 app/themes/{当前模板}/{模块标识}/{模板名称}.html
	 * 微站风格中 app/themes/default/{模块标识}/{模板名称}.html
	 * 模块定义中 addons/{模块标识}/template/mobile/{模板名称}.html
	 * 微站风格中 app/themes/{当前模板}/{模板名称}.html
	 * 微站风格中 app/theme/default/{模板名称}.html
	 *
	 * Web:
	 * 后台风格中 web/themes/{当前模板}/modules/{模板标识}/{模板名称}.html
	 * 后台风格中 web/themes/default/modules/{模板标识}/{模板名称}.html
	 * 模块定义中 addons/{模块标识}/template/{模板名称}.html
	 * 后台风格中 web/themes/{当前模板}/{模板名称}.html
	 * 后台风格中 web/theme/default/{模板名称}.html
	 */
	protected function template($filename) {
		global $_W;
		$name = strtolower($this->modulename);
		$defineDir = dirname($this->__define);
		if(defined('IN_SYS')) {
			$source = IA_ROOT . "/web/themes/{$_W['template']}/{$name}/{$filename}.html";
			$compile = IA_ROOT . "/data/tpl/web/{$_W['template']}/{$name}/{$filename}.tpl.php";
			if(!is_file($source)) {
				$source = IA_ROOT . "/web/themes/default/{$name}/{$filename}.html";
			}
			if(!is_file($source)) {
				$source = $defineDir . "/template/{$filename}.html";
			}
			if(!is_file($source)) {
				$source = IA_ROOT . "/web/themes/{$_W['template']}/{$filename}.html";
			}
			if(!is_file($source)) {
				$source = IA_ROOT . "/web/themes/default/{$filename}.html";
			}
			
		} else {
			$source = IA_ROOT . "/app/themes/{$_W['template']}/{$name}/{$filename}.html";
			$compile = IA_ROOT . "/data/tpl/app/{$_W['template']}/{$name}/{$filename}.tpl.php";
			if(!is_file($source)) {
				$source = IA_ROOT . "/app/themes/default/{$name}/{$filename}.html";
			}
			if(!is_file($source)) {
				$source = $defineDir . "/template/mobile/{$filename}.html";
			}
			if(!is_file($source)) {
				$source = IA_ROOT . "/app/themes/{$_W['template']}/{$filename}.html";
			}
			if(!is_file($source)) {
				$source = IA_ROOT . "/app/themes/default/{$filename}.html";
			}
		}
		if(!is_file($source)) {
			exit("Error: template source '{$filename}' is not exist!");
		}
		if (DEVELOPMENT || !is_file($compile) || filemtime($source) > filemtime($compile)) {
			template_compile($source, $compile, true);
		}
		return $compile;
	}
}

abstract class WeModule extends WeBase {
	public function fieldsFormDisplay($rid = 0) {
		return '';
	}
	public function fieldsFormValidate($rid = 0) {
		return '';
	}
	public function fieldsFormSubmit($rid) {
		//
	}
	public function ruleDeleted($rid) {
		return true;
	}
	public function settingsDisplay($settings) {
		//
	}
}

abstract class WeModuleProcessor extends WeBase {
	public $priority;

	public $message;
	public $inContext;
	public $rule;

	protected function beginContext($expire = 1800) {
		if($this->inContext) {
			return false;
		}
		$expire = intval($expire);
		WeSession::$expire = $expire;
		$_SESSION['__contextmodule'] = $this->module['name'];
		$_SESSION['__contextrule'] = $this->rule;
		$_SESSION['__contextexpire'] = TIMESTAMP + $expire;
		$_SESSION['__contextpriority'] = $this->priority;
		$this->inContext = true;
		return true;
	}
	protected function refreshContext($expire = 1800) {
		if(!$this->inContext) {
			return false;
		}
		$expire = intval($expire);
		WeSession::$expire = $expire;
		$_SESSION['__contextexpire'] = TIMESTAMP + $expire;
		return true;
	}
	protected function endContext() {
		unset($_SESSION['__contextmodule']);
		unset($_SESSION['__contextrule']);
		unset($_SESSION['__contextexpire']);
		unset($_SESSION['__contextpriority']);
		unset($_SESSION);
		session_destroy();
	}
	abstract function respond();
	protected function respText($content) {
		if(stripos($content,'http://') === false) {
			preg_match_all("/(mobile\.php(?:.*?))['|\"]/", $content, $urls);
			if (!empty($urls[1])) {
				foreach ($urls[1] as $url) {
					$content = str_replace($url, $this->buildSiteUrl($url), $content);
				}
			}
		}
		$content = str_replace("\r\n", "\n", $content);
		$response = array();
		$response['FromUserName'] = $this->message['to'];
		$response['ToUserName'] = $this->message['from'];
		$response['MsgType'] = 'text';
		$response['Content'] = htmlspecialchars_decode($content);
		return $response;
	}
	protected function respImage($mid) {
		$response = array();
		$response['FromUserName'] = $this->message['to'];
		$response['ToUserName'] = $this->message['from'];
		$response['MsgType'] = 'image';
		$response['Image']['MediaId'] = $mid;
		return $response;
	}
	protected function respVoice($mid) {
		$response = array();
		$response['FromUserName'] = $this->message['to'];
		$response['ToUserName'] = $this->message['from'];
		$response['MsgType'] = 'voice';
		$response['Voice']['MediaId'] = $mid;
		return $response;
	}
	protected function respVideo(array $video) {
		$response = array();
		$response['FromUserName'] = $this->message['to'];
		$response['ToUserName'] = $this->message['from'];
		$response['MsgType'] = 'video';
		$response['Video']['MediaId'] = $video['video'];
		$response['Video']['ThumbMediaId'] = $video['thumb'];
		return $response;
	}
	protected function respMusic(array $music) {
		global $_W;
		$music = array_change_key_case($music);
		$response = array();
		$response['FromUserName'] = $this->message['to'];
		$response['ToUserName'] = $this->message['from'];
		$response['MsgType'] = 'music';
		$response['Music'] = array(
			'Title'	=> $music['title'],
			'Description' => $music['description'],
			'MusicUrl' => strpos($music['musicurl'], 'http://') === FALSE ? $_W['attachurl'] . $music['musicurl'] : $music['musicurl'],
		);
		if (empty($music['hqmusicurl'])) {
			$response['Music']['HQMusicUrl'] = $response['Music']['MusicUrl'];
		} else {
			$response['Music']['HQMusicUrl'] = strpos($music['hqmusicurl'], 'http://') === FALSE ? $_W['attachurl'] . $music['hqmusicurl'] : $music['hqmusicurl'];
		}
		if($music['thumb']) {
			$response['Music']['ThumbMediaId'] = $music['thumb'];
		}
		return $response;
	}
	protected function respNews(array $news) {
		$news = array_change_key_case($news);
		if (!empty($news['title'])) {
			$news = array($news);
		}
		$response = array();
		$response['FromUserName'] = $this->message['to'];
		$response['ToUserName'] = $this->message['from'];
		$response['MsgType'] = 'news';
		$response['ArticleCount'] = count($news);
		$response['Articles'] = array();
		foreach ($news as $row) {
			$response['Articles'][] = array(
				'Title' => $row['title'],
				'Description' => ($response['ArticleCount'] > 1) ? '' : $row['description'],
				'PicUrl' => !empty($row['picurl']) && !strexists($row['picurl'], 'http://') ? $GLOBALS['_W']['attachurl'] . $row['picurl'] : $row['picurl'],
				'Url' => $this->buildSiteUrl($row['url']),
				'TagName' => 'item',
			);
		}
		return $response;
	}

	protected function buildSiteUrl($url) {
		global $_W;
		if (!strexists($url, 'mobile.php')) {
			return $url;
		}

		$mapping = array(
			'[from]' => $this->message['from'],
			'[to]' => $this->message['to'],
			'[rule]' => $this->rule,
			'[weid]' => $_W['uniacid'],
		);
		$url = str_replace(array_keys($mapping), array_values($mapping), $url);

		$pass = array();
		$pass['openid'] = $this->message['from'];
		$pass['acid'] = $_W['acid'];

		$sql = 'SELECT `fanid`,`salt`,`uid` FROM ' . tablename('mc_mapping_fans') . ' WHERE `acid`=:acid AND `openid`=:openid';
		$pars = array();
		$pars[':acid'] = $_W['acid'];
		$pars[':openid'] = $pass['openid'];
		$fan = pdo_fetch($sql, $pars);
		if(!empty($fan)) {
			$pass['time'] = TIMESTAMP;
			$pass['hash'] = md5("{$pass['openid']}{$pass['time']}{$fan['salt']}{$_W['config']['setting']['authkey']}");
			$auth = base64_encode(json_encode($pass));
			$vars = array();
			$vars['uniacid'] = $_W['uniacid'];
			$vars['__auth'] = $auth;
			$vars['forward'] = base64_encode($url);
			$vars['wxref'] = 'mp.weixin.qq.com';
			return $_W['siteroot'] . url('mobile/auth', $vars);
		}
		return $url;		
	}
}

abstract class WeModuleReceiver extends WeBase {
	public $params;
	public $response;
	public $keyword;
	abstract function receive();
}

abstract class WeModuleSite extends WeBase {
	public $inMobile;
	
	public function __call($name, $arguments) {
		$isWeb = stripos($name, 'doWeb') === 0;
		$isMobile = stripos($name, 'doMobile') === 0;
		if($isWeb || $isMobile) {
			$dir = IA_ROOT . '/addons/' . $this->modulename . '/inc/';
			if($isWeb) {
				$dir .= 'web/';
				$fun = strtolower(substr($name, 5));
			}
			if($isMobile) {
				$dir .= 'mobile/';
				$fun = strtolower(substr($name, 8));
			}
			$file = $dir . $fun . '.inc.php';
			if(file_exists($file)) {
				require $file;
				exit;
			}
		}
		trigger_error("访问的方法 {$name} 不存在.", E_USER_WARNING);
		return null;
	}

	/**
	 * 调用系统的支付功能, 只能在 Mobile 端调用
	 * @param array $params
	 * $params['tid'] 支付订单编号, 应保证在同一模块内部唯一
	 * $params['title'] 产品标题
	 * $params['fee'] 总费用, 不能小于
	 * $params['user'] 付款用户, 付款的用户名(选填项)
	 *
	 * @return void
	 */
	protected function pay($params = array()) {
		global $_W;
		if(!$this->inMobile) {
			message('支付功能只能在手机上使用');
		}
		if($params['fee'] <= 0) {
			message('支付错误, 金额小于0');
		}
		$params['module'] = $this->module['name'];
		$sql = 'SELECT * FROM ' . tablename('core_paylog') . ' WHERE `weid`=:weid AND `module`=:module AND `tid`=:tid';
		$pars = array();
		$pars[':weid'] = $_W['weid'];
		$pars[':module'] = $params['module'];
		$pars[':tid'] = $pars['tid'];
		$log = pdo_fetch($sql, $pars);
		if(!empty($log) && $log['status'] == '1') {
			message('这个订单已经支付成功, 不需要重复支付.');
		}
		$setting = uni_setting($_W['uniacid'], array('payment'));
		if(!is_array($setting['payment'])) {
			message('没有有效的支付方式, 请联系网站管理员.');
		}
		$pay = $setting['payment'];
		include $this->template('paycenter');
	}

	/**
	 * 这是一个回调方法, 当系统在支付完成时调用这个方法通知模块支付结果
	 * @param array $ret
	 * $ret['uniacid'] 当前公众号编号
	 * $ret['result'] 支付结果 success - 成功, 其它值失败
	 * $ret['type'] 支付方式 alipay - 支付宝, wechat - 微信支付, credit - 余额支付
	 * $ret['from'] 通知来源 notify - 后台通知(没有页面访问, 不能进行页面跳转), return - 页面通知(有用户访问, 可以进行跳转和引导)
	 * $ret['tid'] 支付订单编号
	 * $ret['uid'] 支付此订单的用户
	 * $ret['fee'] 订单支付金额
	 * $ret['tag'] 订单附加信息, 根据支付类型不同, 所包含数据不同
	 * @return void
	 */
	public function payResult($ret) {
		global $_W;
		if($ret['from'] == 'return') {
			if ($ret['type'] == 'credit2') {
				message('已经成功支付', url('mobile/channel', array('name' => 'index', 'weid' => $_W['weid'])));
			} else {
				message('已经成功支付', '../../' . url('mobile/channel', array('name' => 'index', 'weid' => $_W['weid'])));
			}
		}
	}

	/**
	 * 查询当前模块的特定订单支付结果
	 * @param int $tid 支付订单编号
	 * @return array $ret 支付结果
	 * $ret['uniacid'] 当前公众号编号
	 * $ret['result'] 支付结果 success - 成功, 其它值失败
	 * $ret['type'] 支付方式 alipay - 支付宝, wechat - 微信支付, credit - 余额支付
	 * $ret['from'] 通知来源 notify - 后台通知(没有页面访问, 不能进行页面跳转), return - 页面通知(有用户访问, 可以进行跳转和引导)
	 * $ret['tid'] 支付订单编号
	 * $ret['uid'] 支付此订单的用户
	 * $ret['fee'] 订单支付金额
	 * $ret['tag'] 订单附加信息, 根据支付类型不同, 所包含数据不同
	 */
	protected function payResultQuery($tid) {
		$sql = 'SELECT * FROM ' . tablename('core_paylog') . ' WHERE `module`=:module AND `tid`=:tid';
		$params = array();
		$params[':module'] = $this->module['name'];
		$params[':tid'] = $tid;
		$log = pdo_fetch($sql, $params);
		$ret = array();
		if(!empty($log)) {
			$ret['weid'] = $log['weid'];
			$ret['result'] = $log['status'] == '1' ? 'success' : 'failed';
			$ret['type'] = $log['type'];
			$ret['from'] = 'query';
			$ret['tid'] = $log['tid'];
			$ret['user'] = $log['openid'];
			$ret['fee'] = $log['fee'];
		}
		return $ret;
	}
}
